name: stubs

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
  workflow_dispatch:
    inputs:
      eplus_matrix:
        description: 'JSON list of EnergyPlus minor versions'
        required: false
        default: '["23.1","24.1"]'
  schedule:
    - cron: '0 9 * * 1'

jobs:
  auto-tag:
    if: ${{ github.event_name == 'schedule' && vars.ENABLE_AUTO_TAG == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Discover latest EnergyPlus tag
        id: discover
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest=$(curl -sSL -H "Authorization: Bearer $GH_TOKEN" \
            https://api.github.com/repos/NREL/EnergyPlus/releases/latest | jq -r '.tag_name')
          case "$latest" in
            v*) ;;
            *) latest="v$latest" ;;
          esac
          echo "LATEST=$latest" >> "$GITHUB_ENV"
      - name: Create tag if missing
        if: ${{ !contains(github.ref, env.LATEST) }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions@users.noreply.github.com"
          git tag -a "${{ env.LATEST }}" -m "Auto tag"
          git push origin "${{ env.LATEST }}"

  build:
    name: Build & Validate
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        eplus: ${{ fromJson(github.event.inputs.eplus_matrix || '["23.1","24.1"]') }}
        target: [eppy-stubs, archetypal-stubs]
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]" jq mypy build
      - name: Resolve EnergyPlus release information
        id: resolve
        run: |
          minor="${{ matrix.eplus }}."
          rel=$(curl -sSL -H "Authorization: Bearer $GH_TOKEN" \
            https://api.github.com/repos/NREL/EnergyPlus/releases | \
            jq -cr --arg m "$minor" '[.[] | select(.tag_name | startswith($m))] | sort_by(.tag_name | split(".")[2] | tonumber) | last')
          tag=$(echo "$rel" | jq -r '.tag_name')
          if [ -z "$tag" ] || [ "$tag" = "null" ]; then
            tag="v${{ matrix.eplus }}.0"
          fi
          version="${tag#v}"
          install="${version//./-}"
          echo "tag=$tag" >> "$GITHUB_ENV"
          echo "version=$version" >> "$GITHUB_ENV"
          echo "install=$install" >> "$GITHUB_ENV"
      - name: Find Linux installer
        id: asset
        run: |
          rel=$(curl -sSL -H "Authorization: Bearer $GH_TOKEN" \
            https://api.github.com/repos/NREL/EnergyPlus/releases/tags/${{ env.tag }})
          url=$(echo "$rel" | jq -r '.assets[] | select(.name | test("Linux.*Ubuntu22.*x86_64.*\\.sh$")) | .browser_download_url' | head -n1)
          if [ -z "$url" ]; then
            url=$(echo "$rel" | jq -r '.assets[] | select(.name | test("Linux.*x86_64.*\\.sh$")) | .browser_download_url' | head -n1)
          fi
          echo "url=$url" >> "$GITHUB_OUTPUT"
      - name: Install EnergyPlus
        run: |
          sudo apt-get update
          sudo apt-get install -y curl ca-certificates libx11-6 libgomp1
          curl -fsSL "${{ steps.asset.outputs.url }}" -o eplus.sh
          chmod +x eplus.sh
          sudo ./eplus.sh --mode unattended --unattendedmodeui none \
            --prefix "/usr/local/EnergyPlus-${{ env.install }}" --debuglevel 2
      - name: Generate stubs
        run: |
          python -m mypy_eppy_builder.build_cli \
            --idd "/usr/local/EnergyPlus-${{ env.install }}/Energy+.idd" \
            --eplus "${{ matrix.eplus }}" \
            --patch 0 \
            --out generated_package
      - name: Lint stubs
        run: |
          root="generated_package/${{ matrix.target }}-${{ matrix.eplus }}.0/src"
          if [ "${{ matrix.target }}" = "eppy-stubs" ]; then
            pkg="$root/eppy"
          else
            pkg="$root/archetypal"
          fi
          if find "$pkg" -type f -name '*.py' | grep -q .; then exit 1; fi
          if find "$pkg" -type f -name 'py.typed' | grep -q .; then exit 1; fi
          test -f "$pkg/__init__.pyi"
      - name: Build wheels
        working-directory: generated_package/${{ matrix.target }}-${{ matrix.eplus }}.0
        run: python -m build --wheel
      - name: Mypy smoke tests
        run: |
          pip install generated_package/eppy-stubs-${{ matrix.eplus }}.0/dist/*.whl
          if [ "${{ matrix.target }}" = "eppy-stubs" ]; then
            cat > ok.py <<'EOF'
            from eppy.idf import IDF
            def ok(i: IDF) -> None:
                i.newidfobject("ZONE", name="Z1", direction_of_relative_north=0.0, part_of_total_floor_area="Yes")
            EOF
            cat > bad.py <<'EOF'
            from eppy.idf import IDF
            def bad(i: IDF) -> None:
                i.newidfobject("ZONE", namez="Z1")
            EOF
            mypy --strict ok.py
            set +e
            mypy --strict bad.py > out.txt 2>&1
            set -e
            grep -q "Unexpected keyword argument" out.txt
          else
            pip install generated_package/archetypal-stubs-${{ matrix.eplus }}.0/dist/*.whl
            cat > ok_arch.py <<'EOF'
            from archetypal.idf import IDF
            def ok(i: IDF) -> None:
                i.newidfobject("ZONE", name="Z2")
            EOF
            mypy --strict ok_arch.py
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-${{ matrix.eplus }}.0
          path: generated_package/${{ matrix.target }}-${{ matrix.eplus }}.0/dist/*.whl

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]" build jq twine
      - name: Derive versions from tag
        id: ver
        run: |
          TAG="${GITHUB_REF##*/}"
          VER="${TAG#v}"
          MINOR="${VER%.*}.${VER#*.}"
          echo "ver=$VER" >> "$GITHUB_OUTPUT"
          echo "minor=$MINOR" >> "$GITHUB_OUTPUT"
      - name: Set dashed version
        id: dasher
        run: |
          dashed="${{ steps.ver.outputs.ver }}"
          dashed="${dashed//./-}"
          echo "dashed=$dashed" >> $GITHUB_OUTPUT
      - name: Find installer for release
        id: asset
        run: |
          rel=$(curl -sSL -H "Authorization: Bearer $GH_TOKEN" \
            "https://api.github.com/repos/NREL/EnergyPlus/releases/tags/v${{ steps.ver.outputs.ver }}")
          url=$(echo "$rel" | jq -r '.assets[] | select(.name | test("Linux.*Ubuntu22.*x86_64.*\\.sh$")) | .browser_download_url' | head -n1)
          if [ -z "$url" ]; then
            url=$(echo "$rel" | jq -r '.assets[] | select(.name | test("Linux.*x86_64.*\\.sh$")) | .browser_download_url' | head -n1)
          fi
          echo "url=$url" >> "$GITHUB_OUTPUT"
      - name: Install EnergyPlus for release
        run: |
          sudo apt-get update && sudo apt-get install -y curl ca-certificates libx11-6 libgomp1
          curl -fsSL "${{ steps.asset.outputs.url }}" -o eplus.sh
          chmod +x eplus.sh
          sudo ./eplus.sh --mode unattended --unattendedmodeui none \
            --prefix "/usr/local/EnergyPlus-${{ steps.dasher.outputs.dashed }}" --debuglevel 2
          ls -l "/usr/local/EnergyPlus-${{ steps.dasher.outputs.dashed }}/Energy+.idd"
      - name: Generate stubs for release
        run: |
          python -m mypy_eppy_builder.build_cli \
            --idd "/usr/local/EnergyPlus-${{ steps.dasher.outputs.dashed }}/Energy+.idd" \
            --eplus "${{ steps.ver.outputs.minor }}" \
            --patch "$(echo "${{ steps.ver.outputs.ver }}" | cut -d. -f3)" \
            --out generated_package
      - name: Build release wheels
        run: |
          python -m build --wheel --outdir dist generated_package/eppy-stubs-${{ steps.ver.outputs.ver }}
          python -m build --wheel --outdir dist generated_package/archetypal-stubs-${{ steps.ver.outputs.ver }}
      - name: Publish to PyPI
        run: |
          twine upload --non-interactive -u __token__ -p "$PYPI_TOKEN" dist/*.whl
